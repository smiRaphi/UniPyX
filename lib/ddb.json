[
    {
        "rqr":null,
        "d":{"c":"isat","v":"\\x5D\\x1C\\x9E\\xA3","o":24},
        "rs":"Wii ISO","s":1
    },
    {
        "rqr":null,
        "d":{"c":"isat","v":"\\xC2\\x33\\x9F\\x3D","o":28},
        "rs":"GameCube ISO","s":1
    },
    {
        "rq":"InstallShield Setup",
        "d":{"c":"contain","v":"MSIEng.isc","r":[-5000000,null]},
        "rs":"InstallShield MSI",
        "s":1
    },
    {
        "rqr":"Win16 NE executable (generic)",
        "d":{"c":"isat","v":"InstallShield Self-Extracting Stub Program","o":943},
        "rs":"InstallShield Setup",
        "s":1
    },
    {
        "rqr":"Win32 Executable MS Visual C++ (generic)",
        "d":"py",
        "py":"f = open(inp,'rb')\nf.seek(0x3C)\nf.seek(int.from_bytes(f.read(4),'little'))\nf.seek(6,1)\nss = int.from_bytes(f.read(2),'little')\nf.seek(12,1)\nf.seek(int.from_bytes(f.read(2),'little') + 2,1)\nfor _ in range(ss):\n\tif f.read(8) == b'.data\\0\\0\\0':f.seek(8,1);sz,of = int.from_bytes(f.read(4),'little'),int.from_bytes(f.read(4),'little');break\n\tf.seek(32,1)\nelse: return\nf.seek(of)\nd = f.read(sz)\nf.close()\nreturn b'\\0WiseMain\\0' in d and b'\\0GLBSInstall\\0' in d",
        "rs":"Wise Installer",
        "s":1
    },
    {
        "d":{"c":"isat","v":"BNR1\\0\\0\\0\\0\\0","o":0},
        "rs":"GC opening.bnr",
        "s":1
    },{
        "d":{"c":"isat","v":"BNR2\\0\\0\\0\\0\\0","o":0},
        "rs":"GC opening.bnr",
        "s":1
    },

    {
        "d":{"c":"isat","v":"FSYS\\0","o":0},
        "rs":"Pokemon FSYS",
        "s":1
    },
    {
        "d":{"c":"isat","v":"\\0\\3\\0\\5\\0\\0\\0\\0","o":0},
        "rs":"RetroStudio PAK",
        "s":1
    },
    {
        "rqr":null,
        "d":{"c":"ext","v":".lz"},
        "rs":"F-Zero G/AX .lz"
    },
    {
        "rqr":"null bytes",
        "d":{"c":"isat","v":"\\x01\\x43\\x44\\x30\\x30\\x31\\x01\\x00\\x50\\x53\\x50\\x20\\x47\\x41\\x4D\\x45","o":32768},
        "rs":"ISO","s":1
    },
    {
        "d":{"c":"isat","v":"\\x01\\x43\\x44\\x30\\x30\\x31\\x01\\x00\\x50\\x4C\\x41\\x59\\x53\\x54\\x41\\x54\\x49\\x4F\\x4E","o":32768},
        "rs":"ISO","s":1
    },
    {
        "rqr":"null bytes",
        "d":{"c":"ext","v":".cdi"},
        "rs":"CDI"
    },
    {
        "rq":"CUE+BIN",
        "d":{"c":"contain","v":"  TRACK 01 CDI/2352","r":[0,null]},
        "rs":"CDI CUE+BIN","s":1
    },
    {
        "rq":"CUE+BIN",
        "d":"py",
        "py":"import re\nf = re.findall(r'\\n  TRACK \\d+ (.+)',open(inp,encoding='utf-8').read())\nreturn f[0] == 'MODE1/2352' and f[1] == 'AUDIO' and f[2] == 'MODE1/2352'",
        "rs":"GD-ROM CUE+BIN","s":1
    },
    {
        "d":{"c":"isat","v":"NCSD\\0\\0","o":256},
        "rs":"NCSD","s":1
    },
    {
        "rqr":null,
        "d":{"c":"isat","v":"\\x7F\\x43\\x4E\\x54\\0\\0\\0\\1","o":0},
        "rs":"PS4 PKG","s":1
    },
    {
        "rqr":null,
        "d":{"c":"isat","v":"\\x7F\\x43\\x4E\\x54\\x40\\0\\0\\1","o":0},
        "rs":"PS4 PKG","s":1
    },
    {
        "d":{"c":"isat","v":"#AMB \\0\\0\\0","o":0},
        "rs":"Sonic AMB","s":1
    },
    {
        "d":{"c":"isat","v":"XPCK","o":0},
        "rs":"Level5 XPCK","s":1
    },
    {
        "d":{"c":"isat","v":"ARC0","o":0},
        "rs":"Level5 ARC","s":1
    }
]